# Final Project Proposal - Sudoku Algorithm #

We propose that our final project be on making a sudoku solver algorithm. 
We will be following the rules of the traditional sudoku puzzle (checking rows, columns, 3 x 3). 
The puzzles we will solve will have already been generated by an online source.

--------------------------------------------------------------------------------------------------------------------------------------

Rules:
You are given a 9 x 9 square along with some fixed numbers. You are to fill the squares with numbers 1-9 such that:
(i) Each row contains every single number exactly once
(ii) Each column contains every single number exactly once
(iii) Each 3x3 square whose row and column has indicies congruent to 0,1,2 mod 3 contains every single number exactly once

This is very similar to latin squares, with thet exception of the 3x3 square condition. 
These puzzles all have a unique solution. Cells provided upon the start of game cannot be changed/ edited. 
The game is done when all squares are filled and conditions (i), (ii), and (iii) are satisfied.

--------------------------------------------------------------------------------------------------------------------------------------

Outline of code parts:

Sudoku class
  - possesses 3 cell arrays (which are 3x3)
  - checkRow() - checks to see if the rows have numbers 1-9
  - checkColumn() - checks to see if the columns have numbers 1-9
  - checkSquare() - checks to see if a 3x3 square has numbers 1-9
  - isFilled() - check to see if the entire sudoku graph is completed correctly
  - toString() - prints the sudoku puzzle
  
Sudoku has-a square

Square
  - isValid() - checks whether a 3 by 3 square has all numbers 1-9
  
Square has-a cell
 
 Cell
  - a cell is a single entity in a square
  - getValue() - return value at cell
  - setValue() - set value of cell
  - checkOriginal() - checks if a cell is originally provided

--------------------------------------------------------------------------------------------------------------------------------------

How it connects to what we learned:
  A great chunk of the class was devoted to thinking recursively. 
  This project would enable us to take this learning and apply it to a more complicated and thought-provoking task. 
  The classes of Sudoku also have a has-a relationship, which is a component of object oriented programming.
  
--------------------------------------------------------------------------------------------------------------------------------------

Additional Functionality (If time permits):
  Report time it took to solve sudoku puzzle and data.
  Have a human person vs AI compete to solve it.
  Talk more about sudoku time complexity and Latin Squares 

